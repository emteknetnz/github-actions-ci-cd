# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions
# https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
# https://docs.github.com/en/actions/learn-github-actions/reusing-workflows

# TODO:
# - [ ] composer REQUIRE_GRAPHQL, etc (ideally would have zero config in modules)
# - [ ] matrix entry for graphql3 vs 4 for behat
# - [ ] PDO matrix entry
# - [ ] npm cache (similar to composer cache)
# - [ ] Consider getting rid of apache and use serve.php for behat since it'll run the job faster and it simplies this file (though behat will always be slow)

name: ce

on:
  workflow_call:
    inputs:
      # default/extra jobs must be multi-line string, as there's no support for type: array for inputs
      extra_jobs:
        type: string
        required: false
        default: ''
      composer_require_extra:
        type: string
        requireed: false
        default: ''
      simple_matrix:
        type: boolean
        default: false
      run_endtoend:
       eEtype: boolean
        default: true
      run_phpcoverage:
        type: boolean
        default: true
      run_phplinting:
        type: booleane
        default: true
      run_phpunit:
        type: boolean
        default: true
      run_js:
        type: boolean
        default: true

jobs:

  # TODO: job to validate/sanitize inputs

  # used to generate a dynamic jobs matrix
  genmatrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: yaml
      - name: generate matrix
        id: generate-matrix
        run: |
          # todo: inputs can go straight into __matrix.php
          touch inputs.yml
          echo "run_endtoend: ${{ inputs.run_endtoend }}" >> inputs.yml
          echo "run_js: ${{ inputs.run_js }}" >> inputs.yml
          echo "run_phpcoverage: ${{ inputs.run_phpcoverage }}" >> inputs.yml
          echo "run_phplinting: ${{ inputs.run_phplinting }}" >> inputs.yml
          echo "run_phpunit: ${{ inputs.run_phpunit }}" >> inputs.yml
          echo "simple_matrix: ${{ inputs.simple_matrix }}" >> inputs.yml
          echo "default_jobs:" >> inputs.yml
          echo "${{ inputs.default_jobs }}" >> inputs.yml
          if [[ "${{ inputs.extra_jobs }}" != "" ]]; then echo "extra_jobs:" >> inputs.yml; fi
          if [[ "${{ inputs.extra_jobs }}" != "" ]]; then echo "${{ inputs.extra_jobs }}" >> inputs.yml; fi
          echo "cat inputs.yml"
          cat inputs.yml

          cat << EOF > __matrix.php
          <?php
          // Reads inputs.yml and creates a new json matrix
          \$inputs = yaml_parse(file_get_contents('inputs.yml'));
          \$run = [];
          \$defaultJobs = [];
          \$extraJobs = [];
          foreach (\$inputs as \$input => \$value) {
            if (preg_match('#^run_#', \$input)) {
              if (\$value === 'true') {
                \$value = true;
              }
              if (\$value === 'false') {
                \$value = false;
              }
              // e.g. run_phplinting => phplinting
              \$type = str_replace('run_', '', \$input);
              \$run[\$type] = \$value;
            } else if (\$input === 'default_jobs') {
              if (\$value === 'none') {
                \$value = [];
              }
              \$defaultJobs = \$value;
            } else if (\$input === 'extra_jobs') {
              if (\$value === 'none') {
                \$value = [];
              }
              \$extraJobs = \$value;
            }
          }
          \$matrix = ['include' => []];
          if ((file_exists('phpunit.xml') || file_exists('phpunit.xml.dist')) && \$run['phpunit']) {
            \$fn = file_exists('phpunit.xml') ? 'phpunit.xml' : 'phpunit.xml.dist';
            \$d = new DOMDocument();
            \$d->preserveWhiteSpace = false;
            \$d->load(\$fn);
            \$x = new DOMXPath(\$d);
            \$tss = \$x->query('//testsuite');
            foreach (\$tss as \$ts) {
              if (!\$ts->hasAttribute('name') || \$ts->getAttribute('name') == 'Default') {
                continue;
              }
              \$matrix['include'][] = ['php' => '7.4', 'phpunit' => true, 'phpunit_suite' => \$ts->getAttribute('name')];
              if (!\$run['simple_matrix']) {
                \$matrix['include'][] = ['php' => '8.0', 'phpunit' => true, 'phpunit_suite' => \$ts->getAttribute('name')];
              }
            }
            if (count(\$matrix) == 0 && \$run['phpunit']) {
              \$matrix['include'][] = ['php' => '7.4', 'phpunit' => true, 'phpunit_suite' => ''];
              if (!\$run['simple_matrix']) {
                \$matrix['include'][] = ['php' => '8.0', 'phpunit' => true, 'phpunit_suite' => ''];
              }
            }
          }
          if ((file_exists('phpcs.xml') || file_exists('phpcs.xml.dist')) && \$run['phpcoverage']) {
            \$matrix['include'][] = ['php' => '7.4', 'phplinting' => true];
          }
          // TODO: no codecov file in silverstripe-admin, so cannot feature detect. should probably run by default and allow disabling with 'no_phpcoverage'?
          if (file_exists('behat.yml') && \$run['endtoend']) {
            \$matrix['include'][] = ['php' => '7.3', 'endtoend' => true];
          }
          if (file_exists('package.json') && \$run['js']) {
            \$matrix['include'][] = ['php' => '7.4', 'js' => true];
          }
          foreach (\$extraJobs as \$arr) {
            \$matrix['include'][] = \$arr;
          }
          foreach (\$matrix['include'] as \$arr) {
              \$arr['composer_arg'] ??= ''; 
          }
          \$json = json_encode(\$matrix);
          \$json = preg_replace("#\n +#", "\n", \$json);
          \$json = str_replace("\n", '', \$json);
          echo trim(\$json);
          EOF
          MATRIX_JSON=$(php __matrix.php)
          echo "MATRIX_JSON: $MATRIX_JSON"
          rm __matrix.php
          echo "::set-output name=matrix::${MATRIX_JSON}"

  tests:
    # TODO: check if this is an LTS - should be 20.04
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: SS_mysite
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    needs: genmatrix

    strategy:
      # set fail-fast to false prevent one job from cancelling other jobs
      fail-fast: false
      matrix: ${{fromJson(needs.genmatrix.outputs.matrix)}}

    env:
      artifacts_name: php${{ matrix.php }}_${{ matrix.phpunit && 'phpunit - ' && matrix.phpunit_suite || '' }}${{ matrix.endtoend && 'endtoend' || '' }}${{ matrix.js && 'js' || '' }}${{ matrix.phpcoverage && 'phpcoverage' || '' }}${{ matrix.phplinting && 'phplinting' || '' }}

    name: PHP ${{ matrix.php }}${{ matrix.phpunit && ' - phpunit - ' && matrix.phpunit_suite || '' }}${{ matrix.endtoend && ' - endtoend' || '' }}${{ matrix.js && ' - js' || '' }}${{ matrix.phpcoverage && ' - phpcoverage' || '' }}${{ matrix.phplinting && ' - phplinting' || '' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: curl, dom, gd, intl, json, ldap, mbstring, mysql, tidy, xdebug, zip
          tools: composer:v2
          coverage: xdebug

      - name: Configure PHP
        run: |
          # Set memory limit and disable xdebug if not running phpcoverage
          if [ ! $(which php) ]; then echo "PHP not installed, skipping" && exit 0; fi
          sudo sh -c "echo 'memory_limit = 8196M' >> /etc/php/${{ matrix.php }}/cli/php.ini"
          if [ -f /etc/php/${{ matrix.php }}/apache2/php.ini ]; then
            sudo sh -c "echo 'memory_limit = 8196M' >> /etc/php/${{ matrix.php }}/apache2/php.ini"
          fi
          # Disable xdebug which greatly slow down unit testing
          # Note: omitting xdebug from shivammathur/setup-php still results in xdebug being installed and enabled
          if ! [ ${{ matrix.phpcoverage }} ]; then
            sudo sh -c "echo ';zend_extension=xdebug.so' > /etc/php/${{ matrix.php }}/mods-available/xdebug.ini"
          fi
          echo "PHP has been configured"

      - name: Apt install additional requirements 
        run: |
          # apt install extra requirements as required
          if [ ${{ matrix.endtoend }} ]; then
            sudo apt install -y software-properties-common
            sudo add-apt-repository -y ppa:ondrej/php
            sudo add-apt-repository -y ppa:ondrej/apache2
            sudo apt update
            sudo apt install libapache2-mod-php${{ matrix.php }}
          fi
          if [[ ${{ github.repository }} =~ /(spellcheck|recipe-authoring-tools)$ ]] || [ ${{ matrix.phpunit_suite }} == recipe-authoring-tools ]; then
            sudo apt install -y hunspell libhunspell-dev hunspell-en-us
          fi

      - name: Configure apache - endtoend test
        if: ${{ matrix.endtoend }}
        run: |
          # apache2 is installed and running by default in ubuntu
          # update dir.conf to use index.php as the primary index doc
          cat << EOF > __dir.conf
          <IfModule mod_dir.c>
              DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm
          </IfModule>
          EOF
          # TODO: sudo cat and get rid of cp?
          sudo cp __dir.conf /etc/apache2/mods-enabled/dir.conf
          rm __dir.conf
          # this script will create a 000-default.conf file with the pwd as the DocumentRoot
          cat << EOF > __000-default
          <VirtualHost *:80>
            ServerAdmin webmaster@localhost
            DocumentRoot $pwd
            <Directory $pwd>
              AllowOverride All
              Require all granted
            </Directory>
            ErrorLog ${APACHE_LOG_DIR}/error.log
            CustomLog ${APACHE_LOG_DIR}/access.log combined
          </VirtualHost>
          EOF
          # TODO: this could be replace with using bash a variable pwd/cwd straight into the inline php
          cat << EOF > __apache2.php
          <?php
          \$pwd = rtrim(trim(shell_exec('pwd')), '/');
          \$s = file_get_contents('__000-default.conf');
          \$s = str_replace('\$pwd', \$pwd, \$s);
          file_put_contents('__000-default.conf', \$s);
          EOF
          php __apache2.php
          sudo cp __000-default.conf /etc/apache2/sites-enabled/000-default.conf
          rm __000-default.conf
          sudo a2enmod rewrite
          # run apache as 'runner:docker' instead of 'www-data:www-data'
          sudo sh -c "echo 'export APACHE_RUN_USER=runner' >> /etc/apache2/envvars"
          sudo sh -c "echo 'export APACHE_RUN_GROUP=docker' >> /etc/apache2/envvars"
          sudo systemctl restart apache2
          echo "Apache has been configured"

      # This is shared between runs, not just jobs. It means the first time the repo runs the job it'll
      # need to download requirements for the first time, after that it will be plenty quick
      # https://docs.github.com/en/actions/advanced-guides/caching-dependencies-to-speed-up-workflows
      - name: Enable shared composer cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/composer
          key: shared-composer-cache

      - name: Composer
        run: |
          if [ ! $(which php) ]; then echo "PHP not installed, skipping" && exit 0; fi
          # Update composer.json and install dependencies
          # github.base_ref is only available on pull-requests and is the target branch
          # github.ref is used for regular branch builds such as crons
          BRANCH=$(php -r "echo preg_replace('#^.+/#', '', '${{ github.base_ref }}'?:'${{ github.ref }}');")
          if [[ "$BRANCH" =~ ^[1-9]$ ]] || [[ "$BRANCH" =~ ^[1-9]\.[0-9]+$ ]]; then export COMPOSER_ROOT_VERSION="${BRANCH}.x-dev"; elif [[ "$BRANCH" =~ ^[1-9]\.[0-9]+\.[0-9]+ ]]; then export COMPOSER_ROOT_VERSION="${BRANCH}"; else export COMPOSER_ROOT_VERSION="dev-${BRANCH}"; fi
          echo "COMPOSER_ROOT_VERSION is $COMPOSER_ROOT_VERSION"
          # TODO: hardcoded to installer, need to allow "self" for recipes/installer runs
          INSTALLER_VERSION=4.x-dev
          if [[ "$COMPOSER_ROOT_VERSION" =~ "x-dev" ]]; then INSTALLER_VERSION=$(php -r "echo preg_replace('/^[0-9]+/', '4', '$COMPOSER_ROOT_VERSION');"); fi
          echo "INSTALLER_VERSION is $INSTALLER_VERSION"
          composer require silverstripe/installer:$INSTALLER_VERSION --no-update
          composer require silverstripe/recipe-testing:^2 --no-update
          # TODO: graphql4 endtoend tests
          composer require silverstripe/graphql:^3 --no-update
          if [ ${{ matrix.phplinting }} ]; then
            composer require silverstripe/cow:dev-master --no-update
          fi
          if [ "${{ inputs.require_extra }}" != "" ]; then
            composer require "${{ inputs.require_extra }}" --no-update
          fi
          # Need to use --prefer-source
          # TODO: remove once php8 support is official
          if [ "${{ matrix.php }}" == "8.0" ]; then
            composer update --prefer-source --no-interaction --no-progress --ignore-platform-reqs ${{ matrix.composer_arg }}
          else
            composer update --prefer-source --no-interaction --no-progress ${{ matrix.composer_arg }}
          fi

          # TODO: tmp until behat-extension PR merged
          # Was having issues with 'github authentication required when adding cc's repo even with the https url
          # so doing this wacky way instead which is much faster anyway
          if [ ${{ matrix.endtoend }} ]; then
            wget https://raw.githubusercontent.com/creative-commoners/silverstripe-behat-extension/pulls/4/skip-mfa/src/Context/BasicContext.php
            cp BasicContext.php vendor/silverstripe/behat-extension/src/Context/BasicContext.php
          fi

      - name: Final preparation
        run: |
          # Add .env file and create artifacts directory
          cat << EOF > .env
          SS_ENVIRONMENT_TYPE="dev"
          SS_DATABASE_CLASS="MySQLDatabase"
          SS_DATABASE_SERVER="127.0.0.1"
          SS_DATABASE_USERNAME="root"
          SS_DATABASE_PASSWORD="root"
          SS_DATABASE_NAME="SS_mysite"
          SS_DEFAULT_ADMIN_USERNAME="admin"
          SS_DEFAULT_ADMIN_PASSWORD="password"
          SS_TRUSTED_PROXY_IPS="*"
          SS_MFA_SECRET_KEY="1234567894175b99966561e1efe237e4"
          SS_BASE_URL="http://localhost"
          EOF

          # Artifacts directory must be created after composer install as it would remove the artifacts directory
          mkdir artifacts
          # Shouldn't dev/build flush here
          # There were issues with a unit test getting the following issue
          # Identifier name 'SilverStripe_CampaignAdmin_Tests_AddToCampaignValidatorTest_TestObject' is too long
          # Likely because the /tmp/silverstripe-cache-php7.4.xyz... dir being out of sync with TestOnly objects
          # If dev/build flush is needed here then delete the silverstripe-cache dir afterwards

      # All tests are contained in a single giant step, as opposed to many smaller steps with an 'if' yml condition,
      # so that the there are a bunch of irrelevant skipped steps e.g. skipping "Test endtoend" on a phpunit run
      - name: Run tests
        run: |
          # Run the tests for the matrix entry

          if [ ${{ matrix.phpunit }} ]; then
            if [ "${{ matrix.phpunit_suite }}" == "" ]; then
              vendor/bin/phpunit --verbose
            else
              vendor/bin/phpunit --verbose --testsuite ${{ matrix.phpunit_suite }}
            fi
            echo "Passed"

          elif [ ${{ matrix.endtoend }} ]; then
            # Run behat tests
            if [ ! -f behat.yml ]; then echo "behat.yml missing" && exit 1; fi
            # this script will update behat.yml to work with headless chrome
            wget "https://raw.githubusercontent.com/emteknetnz/github-actions-ci-cd/${{ inputs.version }}/.github/things/behat-headless.yml"
            cat << EOF > __behat_headless.yml
            default:
              suites: []
              extensions:
                SilverStripe\BehatExtension\MinkExtension:
                  default_session: facebook_web_driver
                  javascript_session: facebook_web_driver
                  facebook_web_driver:
                    browser: chrome
                    wd_host: "http://127.0.0.1:9515"
                    capabilities:
                      extra_capabilities:
                        chromeOptions:
                          args:
                            # no sandbox is required to run chromium inside a container https://stackoverflow.com/a/59154049
                            - "--no-sandbox"
                            # run headless within container - removes the need for xvfb
                            - "--headless"
                            # disable gpu is often mentioned as fix after headless chrome suddenly breaks after an update
                            # leaving it in just in case to prevent hard to diagnose errors later
                            - "--disable-gpu"
                  browser_name: chrome
                SilverStripe\BehatExtension\Extension:
                  screenshot_path: '%paths.base%/artifacts/screenshots'
            EOF
            cat << EOF > __behat.php
            <?php
            // use __behat-headless.yml as the main behat.yml file,
            // though use 'suites' from the module behat.yml
            \$a = file_get_contents('__behat-headless.yml');
            \$b = file_get_contents('behat.yml');
            preg_match("#(?s)  suites:(.+?)\n  [a-z]#", \$b, \$m);
            if (!\$m) {
                preg_match("#(?s)  suites: (.+?)\$#", \$b, \$m);
            }
            if (!\$m) {
                echo "Could not match suites in behat.yml, cannot run behat\n\n";
                die;
            }
            \$c = str_replace('suites: []', 'suites: ' . \$m[1], \$a);
            file_put_contents('behat.yml', \$c);
            EOF
            php __behat.php
            rm __behat.php
            rm __behat-headless.yml
            nohup sh -c "chromedriver" > /dev/null 2>&1 &
            vendor/bin/behat
            echo "Passed"

          elif [ ${{ matrix.js }} ]; then
            # Run yarn test etc
            if [ ! -f package.json ]; then echo "package.json missing" && exit 1; fi
            wget https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh
            php -r "if (hash_file('sha384', 'install.sh') === 'dd4b116a7452fc3bb8c0e410ceac27e19b0ba0f900fe2f91818a95c12e92130fdfb8170fec170b9fb006d316f6386f2b') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('install.sh'); } echo PHP_EOL;"
            if [ ! -f install.sh ]; then echo "Cannot install nvm" && exit 1; fi
            . install.sh
            rm install.sh
            export NVM_DIR="$HOME/.nvm"
            # this loads nvm into the current terminal
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            if [ ! -f .nvmrc ]; then echo "Missing .nvmrc" && exit 1; fi
            nvm install
            nvm use
            rm -rf client/dist
            npm install -g yarn
            yarn install --network-concurrency 1
            if [ -d vendor/silverstripe/admin ]; then
              cd vendor/silverstripe/admin
              yarn install --network-concurrency 1
              cd ../../..
            fi
            yarn run build
            git diff-files --quiet -w --relative=client
            git diff --name-status --relative=client
            yarn run test
            yarn run lint
            echo "Passed"

          elif [ ${{ matrix.phplinting }} ]; then
            if [ ! -f phpcs.xml.dist ]; then echo "Missing phpcs.xml.dist" && exit 1; fi
            vendor/bin/phpcs
            # phpstan is optional
            if [ -f phpstan.neon.dist ]; then
              vendor/bin/phpstan analyse
            fi
            # cow validation is also done here due to it being a tiny piece of work not meriting its own step
            if [ -f .cow.json ]; then
              vendor/bin/cow schema:validate
            fi
            echo "Passed"

          elif [ ${{ matrix.phpcoverage }} ]; then
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --import
            curl -Os https://uploader.codecov.io/latest/codecov-linux
            curl -Os https://uploader.codecov.io/latest/codecov-linux.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/codecov-linux.SHA256SUM.sig
            gpg --verify codecov-linux.SHA256SUM.sig codecov-linux.SHA256SUM
            shasum -a 256 -c codecov-linux.SHA256SUM
            chmod +x codecov-linux
            phpdbg -qrr vendor/bin/phpunit --coverage-clover=coverage.xml
            ./codecov-linux -f coverage.xml;
            echo "coverage.xml generated and uploaded to codecov"
          fi

      - name: Copy artifacts
        if: always()
        run: |
          # Copy selected files to the artifacts dir
          if [ -f composer.json ]; then cp composer.json artifacts; fi
          if [ -f composer.lock ]; then cp composer.lock artifacts; fi
          if [ "${{ matrix.endtoend }}" == "true" && -f behat.yml ]; then cp behat.yml artifacts; fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ${{ env.artifacts_name }}
          path: artifacts
